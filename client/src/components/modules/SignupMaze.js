import React, { useRef, useEffect } from "react";
import { drawCanvas } from "../../../gameLogic/CanvasManager";
import useWindowDimensions from "../../../Hooks";

let canvas;
let ctx;
const gameLogic = require("../../../gameLogic/GameLogic");

const updateGlobalCanvas = (curCanvas, curCtx) => { // Get the canvas and context variables from the UseEffect and update the global variables
    canvas = curCanvas;
    ctx = curCtx;
}


const TILE_SIZE = 24; // Pixels of each tile

const image = (fileName) => { // Load sprite files (STILL WORK IN PROGRESS)
    const img = new Image(TILE_SIZE, TILE_SIZE);
    img.src = `../../public/images/${fileName}`;
    console.log(img.src);
    return img;
}
// List of sprites
let wallImage = image("wall");
let groundImage = image("ground");


const gridLayout = [
    //29 rows and 64 columns
    [3, 0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3, 3,3,3,3,3,3,3,3,3,3,3,3, 3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
    [3, 0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3],
    [3, 0,3,3,3,0,3,3,3,3,3,3,0,0,3,3,3,3,3,0,3,0,3,3,3,3, 0,3,0,3,0,3,0,0,3,0,3,0, 3,0,0,3,0,3,3,3,3,0,3,0,0,3,0,0,3,3,3,3,0,3,0,3,0,3],
    [3, 0,0,0,0,0,0,0,3,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0, 0,3,0,3,3,3,0,3,3,0,3,3, 3,3,0,3,0,3,0,0,3,3,3,0,3,3,3,0,0,3,0,0,0,3,0,3,0,3],
    [3, 0,3,0,3,3,3,3,3,3,0,3,0,3,0,0,3,3,3,3,0,3,0,3,0,0, 0,0,0,3,0,0,0,0,3,0,0,0, 0,3,0,3,0,3,0,0,0,0,3,3,0,0,0,0,0,0,0,3,0,3,0,3,0,3],
    [3, 0,3,0,3,0,0,0,0,0,0,3,0,3,3,0,3,0,3,3,0,3,3,3,3,3, 3,0,3,3,0,0,3,3,3,3,3,0, 0,3,0,3,0,3,3,3,0,0,0,3,0,3,3,0,3,3,3,3,0 ,3,0,0,0,3],
 
    [3, 0,3,0,3,3,3,3,3,3,0,0,0,3,3,0,0,0,0,0,0,3,0, 3,5,0,5,0,0,3,0,3,3,0,5,5,5,0,0,3,0 ,3,0,0,0,3,0,3,0,0,0,3,0,0,0,0,0,3,0,3,0,3,0,3],
    [3, 0,3,0,0,0,0,0,3,0,0,3,0,3,0,0,3,3,3,3,3,3,0, 5,3,5,3,5,0,3,0,0,3,0,3,3,5,3,5,5,5 ,3,3,3,0,3,0,3,3,3,0,3,0,3,3,3,0,3,0,3,0,3,0,3],
    [3, 0,0,0,3,3,3,0,3,3,3,3,3,3,3,3,0,3,0,0,0,0,0, 5,0,5,3,5,3,5,5,5,3,0,3,5,0,3,5,5,5 ,3,0,0,0,0,0,0,0,3,0,3,0,3,0,3,0,0,0,0,0,3,0,3],
    [3, 0,3,0,3,0,0,0,0,0,3,0,0,0,0,3,0,3,0,3,3,3,3, 5,0,5,3,5,0,5,0,5,0,0,5,3,0,3,5,3,3 ,3,3,3,3,3,3,3,0,3,0,3,0,3,0,3,3,3,3,3,0,3,0,3],
    [3, 0,3,0,3,0,3,0,3,0,3,3,3,3,0,3,0,3,0,3,0,0,0, 5,0,0,0,5,0,5,5,5,5,3,5,5,5,3,5,5,5 ,0,0,0,0,0,0,3,0,3,0,3,0,0,0,0,0,3,0,3,0,3,0,3],
    [3, 3,3,0,3,0,0,0,3,0,3,0,3,0,0,3,0,3,0,3,3,3,3, 3,0,0,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0 ,3,3,3,3,0,0,0,0,3,0,3,3,3,3,3,0,0,0,0,0,0,0,3],
    [3, 0,0,0,3,3,3,3,3,0,3,0,3,3,0,3,0,3,0,3,0,3,0, 0,0,0,3,0,0,0,3,3,3,0,3,3,3,3,3,3,0 ,3,0,0,0,0,0,3,3,3,3,3,0,0,0,3,0,3,3,3,0,3,0,3],
    [3, 0,3,0,0,0,3,0,3,0,3,0,3,0,0,3,3,3,3,3,0,3,5, 5,5,5,3,0,3,0,3,0,3,0,3,5,5,5,0,3,0 ,3,0,3,3,3,0,3,0,0,0,0,0,3,0,3,0,3,0,3,0,3,0,3],
    [0, 0,0,0,3,0,3,0,0,0,0,0,3,3,0,0,0,0,0,0,0,0,5, 0,0,5,3,0,3,3,3,0,3,3,3,0,3,5,0,5,5 ,5,0,3,0,0,0,3,3,3,3,0,3,3,0,0,0,3,0,3,0,3,0,3],
    [3, 3,3,3,3,3,3,3,0,3,3,0,3,0,0,3,3,0,3,3,0,3,5, 3,3,0,3,5,5,0,5,5,5,0,0,0,5,3,0,5,5 ,5,0,3,0,3,0,3,0,3,0,0,3,0,0,3,0,0,0,3,0,3,0,3],
    [3, 0,3,0,0,0,3,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,5, 0,0,0,0,5,0,3,5,0,5,0,3,5,3,3,0,5,0 ,3,0,0,0,3,3,0,0,0,0,3,0,0,3,0,0,3,0,0,0,3,0,3],
    [0, 0,3,3,3,0,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,0,5, 5,5,5,3,5,0,3,5,5,5,5,3,5,5,5,0,5,5 ,5,3,3,0,0,3,3,3,3,3,3,3,0,3,3,3,3,3 ,3,0,3,3,3],
 
    [3, 0,3,0 ,0,0,0,0,0,0,0,0,0,3,0,3,0,0,0,0,3,0,0,0,0,0, 0,0,0,3,0,0,0,0,0,3,0,3, 0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3],
    [3, 0,3,3,3,0,3,3,3,3,3,3,3,3,0,0,0,3,0,0,3,0,0,3,3,3, 3,0,0,3,0,0,3,0,3,0,0,3, 0,0,0,3,0,0,0,3,3,3,0,3,3,0,3,3,3,3,3,3,3,3,0,3,0,0],
    [3, 0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,3,3,0,3,3,3,3,0,0, 3,0,3,3,3,3,3,0,3,0,3,3, 3,0,3,3,3,0,3,3,0,3,0,3,0,0,3,0,0,0,0,0,0,3,0,3,0,3],
    [3, 3,3,3,3,3,3,3,3,3,3,3,0,3,0,3,0,3,0,0,0,0,0,0,3,3, 3,0,3,0,0,0,0,0,0,3,0,0, 0,0,0,3,0,0,3,0,0,3,3,3,3,0,3,3,0,3,3,3,3,3,0,0,0,3],
    [3, 0,0,0,3,0,3,0,0,0,3,3,0,3,0,3,0,3,3,0,3,3,3,0,3,0, 3,0,3,3,3,3,3,3,0,0,0,0, 0,3,3,3,3,0,3,0,0,0,3,0,0,0,3,0,0,3,0,0,0,0,0,3,0,3],
    [3, 3,3,0,3,0,3,0,3,0,0,0,0,0,0,3,0,3,0,0,3,0,0,0,3,0, 0,0,0,3,0,0,0,3,0,3,0,3, 0,0,0,3,0,0,3,0,3,0,3,0,3,0,3,3,0,3,0,3,0,3,0,0,0,3],
    [3, 0,0,0,0,0,3,0,3,0,3,0,3,0,0,3,3,3,0,3,3,3,3,0,0,0, 3,0,3,0,0,3,0,3,0,3,0,3, 0,3,0,3,0,3,3,3,0,0,0,0,3,0,3,0,0,3,3,3,0,3,0,3,0,3],
    [0, 0,3,0,3,0,0,0,3,3,0,0,0,3,0,3,0,3,0,3,0,3,0,0,3,0, 3,0,0,3,0,0,3,3,3,3,3,3, 0,3,0,3,0,0,0,3,0,3,0,0,3,0,0,0,3,0,3,0,0,3,0,0,0,3],
    [3, 0,3,0,3,0,3,0,0,3,3,0,0,3,0,3,0,3,3,3,0,3,0,3,0,0, 3,0,3,3,0,3,0,3,0,0,0,0, 0,3,0,3,3,3,3,3,0,3,0,3,3,3,3,0,3,3,3,3,0,0,0,3,0,3],
    [3, 0,0,0,3,0,0,0,3,0,0,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0, 3,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3],
    [3, 3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3, 3,3,3,3,3,3,3,3,3,3,0,3, 3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3]
]


const SignupMaze = () => {
    
    const { height, width } = useWindowDimensions();
    
    // THIS IS THE MAIN FUNCTION TO DRAW A NEW MAP GIVEN A GRIDLAYOUT AND TILE SIZE
    const UpdateMaze = (gridLayout, TILE_SIZE) => {
        let ROW_SIZE = gridLayout.length; // Defines how many maze rows
        let COL_SIZE = gridLayout[0].length; // Defines how many maze columns
        canvas.height = height;
        canvas.width = width;
        console.log(gridLayout.length)
        console.log(gridLayout[0].length)
    
        // This runs through each tile and displays which tile type it is (wall, ground, player, etc)
        for(let row = 0; row < ROW_SIZE; row++){
            for(let col = 0; col < COL_SIZE; col++){
                const tile = gridLayout[row][col]; // Get a specific row and column position of tile
                let image = null;
                switch(tile) {
                    case 0: // Tile is ground
                        ctx.fillStyle="#0B1354";
                        image = groundImage;
                        break;
                    case 3: // Tile is wall
                        ctx.fillStyle="#006BE5";
                        image = wallImage;
                        break;
                    case 5: // Tile is wall
                        ctx.fillStyle="#FCCF14";
                        image = wallImage;
                        break;
                }
    
                // ctx.drawImage(
                //     image,
                //     col * TILE_SIZE*2,
                //     row * TILE_SIZE*2,
                //     TILE_SIZE,
                //     TILE_SIZE,
                // );
                ctx.fillRect(
                    col * TILE_SIZE,
                    row * TILE_SIZE,
                    TILE_SIZE,
                    TILE_SIZE
                )
            }
        }
    }

    const canvasRef = useRef(null);

    // At mount, 
    useEffect(() => { 
        
        const curCanvas = canvasRef.current;
        const curCtx = curCanvas.getContext('2d');
        updateGlobalCanvas(curCanvas, curCtx);

        UpdateMaze(gridLayout, TILE_SIZE);
    }, []);

    return (
        <canvas ref={canvasRef} />
    )
    
}

export default SignupMaze;
